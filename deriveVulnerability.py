# -*- coding: utf-8 -*-
"""
Created on Wed Feb  7 13:24:57 2024

@author: Moayad
"""

## Load dependencies 
import pandas as pd
import numpy as np
import storeyloss
import os
import matplotlib.pyplot as plt
from utils import *
from scipy.optimize import curve_fit  
from scipy.stats import norm

def fun_logit(x,a,b):
    return np.exp(-(a+b*np.log(x)))/(1+np.exp(-(a+b*np.log(x))))

def fun_weibull(x, a, b, c):
    return a * (1 - np.exp(-(x / b) ** c))

def fun_papa(x, a, b, c, d, e):
    return e * x**a / (b**a + x**a) + \
        (1 - e) * x**c / (d**c + x**c)

def fun_cdf(x,mu,sigma):
    return scipy.stats.norm(mu,sigma).cdf(x)

class deriveVulnerability():
    
    def __init__(self, region, typology, occupancy, gitDir):
        """
        Vulnerability calculation tool
        :param region:     string             String of vulnerability region (e.g., 'Region 1')
        :param typology:   string             String defining building class (e.g., 'RC' for reinforced concrete)
                                              Options are: 
                                                  1) 'CR'= Reinforced Concrete
                                                  2) 'MCF_MR' =  Masonry (Reinforced/Confined)
                                                  3) 'MUR' = Masonry (Unreinforced)          
                                                  4) 'S' =  Steel
                                                  5) 'W' =  Wood/Timber
                                                  6) 'ADO' = Adobe       
        :param occupancy:  string             String defining the occupancy type (e.g., 'Res' for residential)
        :param psd:        array              Array of peak storey drifts with size  [ngmrs x nst] 
        :param pfa:        array              Array of peak floor acceleration with size [ngmrs x nfloors]
        :param gitDir:     string             Directory of the local GitHub repository
        :param OutDir:     string             Directory of the output folder

        """
        
        self.region = region.lower()
        self.typology = typology.upper()
        self.occupancy = occupancy.upper()
        #self.psd = psd
        #self.pfa = pfa
        self.gitDir = gitDir
                
        if region.lower() == 'region 1':
            
            self.econFactor = 1.000
            
            # Concrete building class
            if self.typology.lower() == 'cr' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.242,0.121],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.737,0.369],
                             'Stairs'                          : [0.020,0.010],
                             'Electrical Components'           : [0.330,0.165],
                             'HVAC Systems'                    : [0.296,0.148],
                             'Piping Systems'                  : [0.179,0.090],
                             'Ceiling Systems'                 : [0.195,0.097]}
                        
            elif self.typology.lower() == 'cr' and self.occupancy.lower() == 'com':

                self.data = {'Light Partitions and Finishes'   : [0.340,0.170],
                             'Heavy Partitions and Finishes'   : [0.130,0.065],
                             'Windows, Glazings and Doors'     : [0.510,0.255],
                             'Stairs'                          : [0.020,0.010],
                             'Electrical Components'           : [0.330,0.165],
                             'HVAC Systems'                    : [0.320,0.160],
                             'Piping Systems'                  : [0.210,0.105],
                             'Ceiling Systems'                 : [0.140,0.070]}
                

            elif self.typology.lower() == 'cr' and self.occupancy.lower() == 'ind':

                self.data = {'Light Partitions and Finishes'   : [0.000,0.000],
                             'Heavy Partitions and Finishes'   : [0.410,0.205],
                             'Windows, Glazings and Doors'     : [0.540,0.270],
                             'Stairs'                          : [0.050,0.025],
                             'Electrical Components'           : [0.230,0.115],
                             'HVAC Systems'                    : [0.180,0.090],
                             'Piping Systems'                  : [0.460,0.230],
                             'Ceiling Systems'                 : [0.130,0.065]}

            # Masonry (reinforced/confined) building class
            if self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.360,0.180],
                             'HVAC Systems'                    : [0.290,0.145],
                             'Piping Systems'                  : [0.240,0.120],
                             'Ceiling Systems'                 : [0.110,0.055]}
            
            elif self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.360,0.180],
                             'HVAC Systems'                    : [0.290,0.145],
                             'Piping Systems'                  : [0.240,0.120],
                             'Ceiling Systems'                 : [0.110,0.055]}

            elif self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.360,0.180],
                             'HVAC Systems'                    : [0.290,0.145],
                             'Piping Systems'                  : [0.240,0.120],
                             'Ceiling Systems'                 : [0.110,0.055]}

            # Steel building class
            if self.typology.lower() == 's' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.350,0.175],
                             'Windows, Glazings and Doors'     : [0.360,0.180],
                             'Stairs'                          : [0.040,0.020],
                             'Electrical Components'           : [0.200,0.100],
                             'HVAC Systems'                    : [0.240,0.120],
                             'Piping Systems'                  : [0.360,0.180],
                             'Ceiling Systems'                 : [0.200,0.100]}

            elif self.typology.lower() == 's' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.190,0.095],
                             'Heavy Partitions and Finishes'   : [0.220,0.110],
                             'Windows, Glazings and Doors'     : [0.530,0.265],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.220,0.110],
                             'HVAC Systems'                    : [0.260,0.130],
                             'Piping Systems'                  : [0.320,0.160],
                             'Ceiling Systems'                 : [0.200,0.100]}

            elif self.typology.lower() == 's' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.180,0.090],
                             'Heavy Partitions and Finishes'   : [0.230,0.115],
                             'Windows, Glazings and Doors'     : [0.590,0.295],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.280,0.140],
                             'HVAC Systems'                    : [0.300,0.150],
                             'Piping Systems'                  : [0.330,0.165],
                             'Ceiling Systems'                 : [0.090,0.045]}

            # Wood building class
            if self.typology.lower() == 'w' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.130],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.350],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.360,0.180],
                             'HVAC Systems'                    : [0.290,0.150],
                             'Piping Systems'                  : [0.240,0.120],
                             'Ceiling Systems'                 : [0.110,0.060]}

            elif self.typology.lower() == 'w' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.340,0.170],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.600,0.300],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.300,0.150],
                             'HVAC Systems'                    : [0.290,0.150],
                             'Piping Systems'                  : [0.240,0.120],
                             'Ceiling Systems'                 : [0.170,0.090]}

            elif self.typology.lower() == 'w' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.130],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.350],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.360,0.180],
                             'HVAC Systems'                    : [0.290,0.150],
                             'Piping Systems'                  : [0.240,0.120],
                             'Ceiling Systems'                 : [0.110,0.060]}

            # Adobe building class
            if self.typology.lower() == 'ado' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.900,0.450],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.900,0.450],
                             'HVAC Systems'                    : [0.000,0.000],
                             'Piping Systems'                  : [0.100,0.050],
                             'Ceiling Systems'                 : [0.000,0.000]}

            elif self.typology.lower() == 'ado' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.900,0.450],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.900,0.450],
                             'HVAC Systems'                    : [0.000,0.000],
                             'Piping Systems'                  : [0.100,0.050],
                             'Ceiling Systems'                 : [0.000,0.000]}

            elif self.typology.lower() == 'ado' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.900,0.450],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.900,0.450],
                             'HVAC Systems'                    : [0.000,0.000],
                             'Piping Systems'                  : [0.100,0.050],
                             'Ceiling Systems'                 : [0.000,0.000]}

        elif region.lower() == 'region 2':
            
            self.econFactor = 0.925

            if self.typology.lower() == 'cr' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.150,0.075],
                             'Heavy Partitions and Finishes'   : [0.287,0.143],
                             'Windows, Glazings and Doors'     : [0.556,0.277],
                             'Stairs'                          : [0.012,0.006],
                             'Electrical Components'           : [0.365,0.182],
                             'HVAC Systems'                    : [0.258,0.129],
                             'Piping Systems'                  : [0.138,0.069],
                             'Ceiling Systems'                 : [0.239,0.119]}
    
            elif self.typology.lower() == 'cr' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.290,0.145],
                             'Heavy Partitions and Finishes'   : [0.140,0.070],
                             'Windows, Glazings and Doors'     : [0.540,0.270],
                             'Stairs'                          : [0.030,0.015],
                             'Electrical Components'           : [0.330,0.165],
                             'HVAC Systems'                    : [0.270,0.135],
                             'Piping Systems'                  : [0.190,0.095],
                             'Ceiling Systems'                 : [0.210,0.105]}


            elif self.typology.lower() == 'cr' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.000,0.000],
                             'Heavy Partitions and Finishes'   : [0.430,0.215],
                             'Windows, Glazings and Doors'     : [0.540,0.270],
                             'Stairs'                          : [0.030,0.015],
                             'Electrical Components'           : [0.330,0.165],
                             'HVAC Systems'                    : [0.270,0.135],
                             'Piping Systems'                  : [0.190,0.095],
                             'Ceiling Systems'                 : [0.210,0.105]}

            # Masonry (reinforced/confined) building class
            if self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.340,0.170],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.590,0.295],
                             'Stairs'                          : [0.070,0.035],
                             'Electrical Components'           : [0.370,0.185],
                             'HVAC Systems'                    : [0.260,0.130],
                             'Piping Systems'                  : [0.210,0.105],
                             'Ceiling Systems'                 : [0.160,0.080]}

            elif self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.340,0.170],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.590,0.295],
                             'Stairs'                          : [0.070,0.035],
                             'Electrical Components'           : [0.370,0.185],
                             'HVAC Systems'                    : [0.260,0.130],
                             'Piping Systems'                  : [0.210,0.105],
                             'Ceiling Systems'                 : [0.160,0.080]}

            elif self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.340,0.170],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.590,0.295],
                             'Stairs'                          : [0.070,0.035],
                             'Electrical Components'           : [0.370,0.185],
                             'HVAC Systems'                    : [0.260,0.130],
                             'Piping Systems'                  : [0.210,0.105],
                             'Ceiling Systems'                 : [0.160,0.080]}

            # Steel building class
            if self.typology.lower() == 's' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.180,0.090],
                             'Heavy Partitions and Finishes'   : [0.440,0.220],
                             'Windows, Glazings and Doors'     : [0.360,0.180],
                             'Stairs'                          : [0.020,0.010],
                             'Electrical Components'           : [0.370,0.185],
                             'HVAC Systems'                    : [0.260,0.130],
                             'Piping Systems'                  : [0.210,0.105],
                             'Ceiling Systems'                 : [0.160,0.080]}

            elif self.typology.lower() == 's' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.340,0.170],
                             'Heavy Partitions and Finishes'   : [0.140,0.070],
                             'Windows, Glazings and Doors'     : [0.490,0.245],
                             'Stairs'                          : [0.030,0.015],
                             'Electrical Components'           : [0.220,0.110],
                             'HVAC Systems'                    : [0.260,0.130],
                             'Piping Systems'                  : [0.320,0.160],
                             'Ceiling Systems'                 : [0.200,0.100]}

            elif self.typology.lower() == 's' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.240,0.120],
                             'Heavy Partitions and Finishes'   : [0.170,0.085],
                             'Windows, Glazings and Doors'     : [0.590,0.295],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.270,0.135],
                             'HVAC Systems'                    : [0.300,0.150],
                             'Piping Systems'                  : [0.340,0.170],
                             'Ceiling Systems'                 : [0.090,0.045]}

            # Wood building class
            if self.typology.lower() == 'w' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.340,0.170],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.590,0.300],
                             'Stairs'                          : [0.070,0.040],
                             'Electrical Components'           : [0.370,0.190],
                             'HVAC Systems'                    : [0.260,0.130],
                             'Piping Systems'                  : [0.210,0.110],
                             'Ceiling Systems'                 : [0.160,0.080]}

            elif self.typology.lower() == 'w' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.230,0.120],
                             'Heavy Partitions and Finishes'   : [0.110,0.060],
                             'Windows, Glazings and Doors'     : [0.590,0.300],
                             'Stairs'                          : [0.070,0.040],
                             'Electrical Components'           : [0.370,0.190],
                             'HVAC Systems'                    : [0.260,0.130],
                             'Piping Systems'                  : [0.210,0.110],
                             'Ceiling Systems'                 : [0.160,0.080]}

            elif self.typology.lower() == 'w' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.230,0.120],
                             'Heavy Partitions and Finishes'   : [0.110,0.060],
                             'Windows, Glazings and Doors'     : [0.590,0.300],
                             'Stairs'                          : [0.070,0.040],
                             'Electrical Components'           : [0.370,0.190],
                             'HVAC Systems'                    : [0.260,0.130],
                             'Piping Systems'                  : [0.210,0.110],
                             'Ceiling Systems'                 : [0.160,0.080]}

            # Adobe building class
            if self.typology.lower() == 'ado' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.900,0.450],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.900,0.450],
                             'HVAC Systems'                    : [0.000,0.000],
                             'Piping Systems'                  : [0.100,0.050],
                             'Ceiling Systems'                 : [0.000,0.000]}

            elif self.typology.lower() == 'ado' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.900,0.450],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.900,0.450],
                             'HVAC Systems'                    : [0.000,0.000],
                             'Piping Systems'                  : [0.100,0.050],
                             'Ceiling Systems'                 : [0.000,0.000]}

            elif self.typology.lower() == 'ado' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.900,0.450],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.900,0.450],
                             'HVAC Systems'                    : [0.000,0.000],
                             'Piping Systems'                  : [0.100,0.050],
                             'Ceiling Systems'                 : [0.000,0.000]}

        elif region.lower() == 'region 3':

            self.econFactor = 0.760

            if self.typology.lower() == 'cr' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.140,0.070],
                             'Heavy Partitions and Finishes'   : [0.270,0.134],
                             'Windows, Glazings and Doors'     : [0.530,0.264],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.220,0.109],
                             'HVAC Systems'                    : [0.350,0.174],
                             'Piping Systems'                  : [0.190,0.095],
                             'Ceiling Systems'                 : [0.250,0.124]}

            elif self.typology.lower() == 'cr' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.120,0.060],
                             'Heavy Partitions and Finishes'   : [0.270,0.135],
                             'Windows, Glazings and Doors'     : [0.530,0.265],
                             'Stairs'                          : [0.080,0.040],
                             'Electrical Components'           : [0.230,0.115],
                             'HVAC Systems'                    : [0.330,0.165],
                             'Piping Systems'                  : [0.190,0.095],
                             'Ceiling Systems'                 : [0.250,0.125]}

            elif self.typology.lower() == 'cr' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.000,0.000],
                             'Heavy Partitions and Finishes'   : [0.430,0.215],
                             'Windows, Glazings and Doors'     : [0.540,0.270],
                             'Stairs'                          : [0.030,0.015],
                             'Electrical Components'           : [0.230,0.115],
                             'HVAC Systems'                    : [0.330,0.165],
                             'Piping Systems'                  : [0.190,0.095],
                             'Ceiling Systems'                 : [0.250,0.125]}

            # Masonry (reinforced/confined) building class
            if self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.310,0.155],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.630,0.315],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.220,0.110],
                             'HVAC Systems'                    : [0.340,0.170],
                             'Piping Systems'                  : [0.190,0.095],
                             'Ceiling Systems'                 : [0.250,0.125]}

            elif self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.310,0.155],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.630,0.315],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.220,0.110],
                             'HVAC Systems'                    : [0.340,0.170],
                             'Piping Systems'                  : [0.190,0.095],
                             'Ceiling Systems'                 : [0.250,0.125]}

            elif self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.310,0.155],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.630,0.315],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.220,0.110],
                             'HVAC Systems'                    : [0.340,0.170],
                             'Piping Systems'                  : [0.190,0.095],
                             'Ceiling Systems'                 : [0.250,0.125]}

            # Steel building class
            if self.typology.lower() == 's' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.300,0.150],
                             'Heavy Partitions and Finishes'   : [0.100,0.050],
                             'Windows, Glazings and Doors'     : [0.530,0.265],
                             'Stairs'                          : [0.070,0.035],
                             'Electrical Components'           : [0.220,0.110],
                             'HVAC Systems'                    : [0.350,0.175],
                             'Piping Systems'                  : [0.240,0.120],
                             'Ceiling Systems'                 : [0.190,0.095]}
                
            elif self.typology.lower() == 's' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.130,0.065],
                             'Heavy Partitions and Finishes'   : [0.120,0.060],
                             'Windows, Glazings and Doors'     : [0.550,0.275],
                             'Stairs'                          : [0.200,0.100],
                             'Electrical Components'           : [0.220,0.110],
                             'HVAC Systems'                    : [0.390,0.195],
                             'Piping Systems'                  : [0.090,0.045],
                             'Ceiling Systems'                 : [0.300,0.150]}

            elif self.typology.lower() == 's' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.200,0.100],
                             'Heavy Partitions and Finishes'   : [0.400,0.200],
                             'Windows, Glazings and Doors'     : [0.400,0.200],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.240,0.120],
                             'HVAC Systems'                    : [0.300,0.150],
                             'Piping Systems'                  : [0.340,0.170],
                             'Ceiling Systems'                 : [0.120,0.060]}

            # Wood building class
            if self.typology.lower() == 'w' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.310,0.160],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.630,0.320],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.220,0.110],
                             'HVAC Systems'                    : [0.340,0.170],
                             'Piping Systems'                  : [0.190,0.100],
                             'Ceiling Systems'                 : [0.250,0.130]}
                
            elif self.typology.lower() == 'w' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.230,0.120],
                             'Heavy Partitions and Finishes'   : [0.110,0.060],
                             'Windows, Glazings and Doors'     : [0.590,0.300],
                             'Stairs'                          : [0.070,0.040],
                             'Electrical Components'           : [0.370,0.190],
                             'HVAC Systems'                    : [0.260,0.130],
                             'Piping Systems'                  : [0.210,0.110],
                             'Ceiling Systems'                 : [0.160,0.080]}

            elif self.typology.lower() == 'w' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.310,0.160],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.630,0.320],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.220,0.110],
                             'HVAC Systems'                    : [0.340,0.170],
                             'Piping Systems'                  : [0.190,0.100],
                             'Ceiling Systems'                 : [0.250,0.130]}

            # Adobe building class
            if self.typology.lower() == 'ado' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.900,0.450],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.900,0.450],
                             'HVAC Systems'                    : [0.000,0.000],
                             'Piping Systems'                  : [0.100,0.050],
                             'Ceiling Systems'                 : [0.000,0.000]}

            elif self.typology.lower() == 'ado' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.900,0.450],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.900,0.450],
                             'HVAC Systems'                    : [0.000,0.000],
                             'Piping Systems'                  : [0.100,0.050],
                             'Ceiling Systems'                 : [0.000,0.000]}

            elif self.typology.lower() == 'ado' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.900,0.450],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.900,0.450],
                             'HVAC Systems'                    : [0.000,0.000],
                             'Piping Systems'                  : [0.100,0.050],
                             'Ceiling Systems'                 : [0.000,0.000]}

        elif region.lower() == 'region 4':

            self.econFactor = 0.550

            if self.typology.lower() == 'cr' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.150,0.075],
                             'Heavy Partitions and Finishes'   : [0.350,0.175],
                             'Windows, Glazings and Doors'     : [0.450,0.225],
                             'Stairs'                          : [0.050,0.025],
                             'Electrical Components'           : [0.350,0.175],
                             'HVAC Systems'                    : [0.150,0.075],
                             'Piping Systems'                  : [0.250,0.125],
                             'Ceiling Systems'                 : [0.250,0.125]}

            elif self.typology.lower() == 'cr' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.150,0.075],
                             'Heavy Partitions and Finishes'   : [0.350,0.175],
                             'Windows, Glazings and Doors'     : [0.450,0.225],
                             'Stairs'                          : [0.050,0.025],
                             'Electrical Components'           : [0.330,0.165],
                             'HVAC Systems'                    : [0.200,0.100],
                             'Piping Systems'                  : [0.210,0.105],
                             'Ceiling Systems'                 : [0.260,0.130]}

            elif self.typology.lower() == 'cr' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.150,0.075],
                             'Heavy Partitions and Finishes'   : [0.350,0.174],
                             'Windows, Glazings and Doors'     : [0.450,0.224],
                             'Stairs'                          : [0.050,0.025],
                             'Electrical Components'           : [0.320,0.159],
                             'HVAC Systems'                    : [0.220,0.109],
                             'Piping Systems'                  : [0.280,0.139],
                             'Ceiling Systems'                 : [0.190,0.095]}

            # Masonry (reinforced/confined) building class
            if self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.260,0.130],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.050,0.025],
                             'Electrical Components'           : [0.350,0.175],
                             'HVAC Systems'                    : [0.210,0.105],
                             'Piping Systems'                  : [0.260,0.130],
                             'Ceiling Systems'                 : [0.180,0.090]}

            elif self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.260,0.130],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.050,0.025],
                             'Electrical Components'           : [0.350,0.175],
                             'HVAC Systems'                    : [0.210,0.105],
                             'Piping Systems'                  : [0.260,0.130],
                             'Ceiling Systems'                 : [0.180,0.090]}

            elif self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.260,0.130],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.050,0.025],
                             'Electrical Components'           : [0.350,0.175],
                             'HVAC Systems'                    : [0.210,0.105],
                             'Piping Systems'                  : [0.260,0.130],
                             'Ceiling Systems'                 : [0.180,0.090]}

            # Steel building class
            if self.typology.lower() == 's' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.350,0.175],
                             'Windows, Glazings and Doors'     : [0.360,0.180],
                             'Stairs'                          : [0.040,0.020],
                             'Electrical Components'           : [0.200,0.100],
                             'HVAC Systems'                    : [0.240,0.120],
                             'Piping Systems'                  : [0.360,0.180],
                             'Ceiling Systems'                 : [0.200,0.100]}

            elif self.typology.lower() == 's' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.190,0.095],
                             'Heavy Partitions and Finishes'   : [0.220,0.110],
                             'Windows, Glazings and Doors'     : [0.530,0.265],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.220,0.110],
                             'HVAC Systems'                    : [0.260,0.130],
                             'Piping Systems'                  : [0.320,0.160],
                             'Ceiling Systems'                 : [0.200,0.100]}

            elif self.typology.lower() == 's' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.260,0.130],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.050,0.025],
                             'Electrical Components'           : [0.350,0.175],
                             'HVAC Systems'                    : [0.210,0.105],
                             'Piping Systems'                  : [0.260,0.130],
                             'Ceiling Systems'                 : [0.180,0.090]}

            # Wood building class
            if self.typology.lower() == 'w' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.260,0.130],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.350],
                             'Stairs'                          : [0.050,0.030],
                             'Electrical Components'           : [0.350,0.180],
                             'HVAC Systems'                    : [0.210,0.110],
                             'Piping Systems'                  : [0.260,0.130],
                             'Ceiling Systems'                 : [0.180,0.090]}

            elif self.typology.lower() == 'w' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.260,0.130],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.350],
                             'Stairs'                          : [0.050,0.030],
                             'Electrical Components'           : [0.350,0.180],
                             'HVAC Systems'                    : [0.210,0.110],
                             'Piping Systems'                  : [0.260,0.130],
                             'Ceiling Systems'                 : [0.180,0.090]}

            elif self.typology.lower() == 'w' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.260,0.130],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.350],
                             'Stairs'                          : [0.050,0.030],
                             'Electrical Components'           : [0.350,0.180],
                             'HVAC Systems'                    : [0.210,0.110],
                             'Piping Systems'                  : [0.260,0.130],
                             'Ceiling Systems'                 : [0.180,0.090]}

            # Adobe building class
            if self.typology.lower() == 'ado' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.900,0.450],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.900,0.450],
                             'HVAC Systems'                    : [0.000,0.000],
                             'Piping Systems'                  : [0.100,0.050],
                             'Ceiling Systems'                 : [0.000,0.000]}

            elif self.typology.lower() == 'ado' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.900,0.450],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.900,0.450],
                             'HVAC Systems'                    : [0.000,0.000],
                             'Piping Systems'                  : [0.100,0.050],
                             'Ceiling Systems'                 : [0.000,0.000]}

            elif self.typology.lower() == 'ado' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.900,0.450],
                             'Stairs'                          : [0.000,0.000],
                             'Electrical Components'           : [0.900,0.450],
                             'HVAC Systems'                    : [0.000,0.000],
                             'Piping Systems'                  : [0.100,0.050],
                             'Ceiling Systems'                 : [0.000,0.000]}
        
        elif region.lower() == 'region 5':
            
            self.econFactor = 0.470
            
            if self.typology.lower() == 'cr' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.110,0.055],
                             'Heavy Partitions and Finishes'   : [0.260,0.130],
                             'Windows, Glazings and Doors'     : [0.569,0.284],
                             'Stairs'                          : [0.061,0.031],
                             'Electrical Components'           : [0.405,0.203],
                             'HVAC Systems'                    : [0.199,0.099],
                             'Piping Systems'                  : [0.222,0.111],
                             'Ceiling Systems'                 : [0.174,0.087]}

            elif self.typology.lower() == 'cr' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.240,0.120],
                             'Heavy Partitions and Finishes'   : [0.210,0.105],
                             'Windows, Glazings and Doors'     : [0.490,0.245],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.380,0.190],
                             'HVAC Systems'                    : [0.210,0.105],
                             'Piping Systems'                  : [0.220,0.110],
                             'Ceiling Systems'                 : [0.190,0.095]}

            elif self.typology.lower() == 'cr' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.000,0.000],
                             'Heavy Partitions and Finishes'   : [0.430,0.215],
                             'Windows, Glazings and Doors'     : [0.540,0.270],
                             'Stairs'                          : [0.030,0.015],
                             'Electrical Components'           : [0.380,0.190],
                             'HVAC Systems'                    : [0.210,0.105],
                             'Piping Systems'                  : [0.220,0.110],
                             'Ceiling Systems'                 : [0.190,0.095]}

            # Masonry (reinforced/confined) building class
            if self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.405,0.203],
                             'HVAC Systems'                    : [0.199,0.099],
                             'Piping Systems'                  : [0.222,0.111],
                             'Ceiling Systems'                 : [0.174,0.087]}

            elif self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.405,0.203],
                             'HVAC Systems'                    : [0.199,0.099],
                             'Piping Systems'                  : [0.222,0.111],
                             'Ceiling Systems'                 : [0.174,0.087]}

            elif self.typology.lower() == 'mcf_mr' or self.typology.lower() == 'mur' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.405,0.203],
                             'HVAC Systems'                    : [0.199,0.099],
                             'Piping Systems'                  : [0.222,0.111],
                             'Ceiling Systems'                 : [0.174,0.087]}

            # Steel building class
            if self.typology.lower() == 's' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.220,0.110],
                             'Windows, Glazings and Doors'     : [0.470,0.235],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.405,0.203],
                             'HVAC Systems'                    : [0.199,0.099],
                             'Piping Systems'                  : [0.222,0.111],
                             'Ceiling Systems'                 : [0.174,0.087]}

            elif self.typology.lower() == 's' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.405,0.203],
                             'HVAC Systems'                    : [0.199,0.099],
                             'Piping Systems'                  : [0.222,0.111],
                             'Ceiling Systems'                 : [0.174,0.087]}

            elif self.typology.lower() == 's' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.405,0.203],
                             'HVAC Systems'                    : [0.199,0.099],
                             'Piping Systems'                  : [0.222,0.111],
                             'Ceiling Systems'                 : [0.174,0.087]}
                       
            # Wood building class
            if self.typology.lower() == 'w' and self.occupancy.lower() == 'res':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.405,0.203],
                             'HVAC Systems'                    : [0.199,0.099],
                             'Piping Systems'                  : [0.222,0.111],
                             'Ceiling Systems'                 : [0.174,0.087]}
                
            elif self.typology.lower() == 'w' and self.occupancy.lower() == 'com':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.405,0.203],
                             'HVAC Systems'                    : [0.199,0.099],
                             'Piping Systems'                  : [0.222,0.111],
                             'Ceiling Systems'                 : [0.174,0.087]}
                
            elif self.typology.lower() == 'w' and self.occupancy.lower() == 'ind':
                
                self.data = {'Light Partitions and Finishes'   : [0.250,0.125],
                             'Heavy Partitions and Finishes'   : [0.000,0.000],
                             'Windows, Glazings and Doors'     : [0.690,0.345],
                             'Stairs'                          : [0.060,0.030],
                             'Electrical Components'           : [0.405,0.203],
                             'HVAC Systems'                    : [0.199,0.099],
                             'Piping Systems'                  : [0.222,0.111],
                             'Ceiling Systems'                 : [0.174,0.087]}
                
            # Adobe building class
            if self.typology.lower() == 'ado' and self.occupancy.lower() == 'res':
                
                 self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                              'Heavy Partitions and Finishes'   : [0.000,0.000],
                              'Windows, Glazings and Doors'     : [0.900,0.450],
                              'Stairs'                          : [0.000,0.000],
                              'Electrical Components'           : [0.900,0.450],
                              'HVAC Systems'                    : [0.000,0.000],
                              'Piping Systems'                  : [0.100,0.050],
                              'Ceiling Systems'                 : [0.000,0.000]}
                 
            elif self.typology.lower() == 'ado' and self.occupancy.lower() == 'com':
                 
                 self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                              'Heavy Partitions and Finishes'   : [0.000,0.000],
                              'Windows, Glazings and Doors'     : [0.900,0.450],
                              'Stairs'                          : [0.000,0.000],
                              'Electrical Components'           : [0.900,0.450],
                              'HVAC Systems'                    : [0.000,0.000],
                              'Piping Systems'                  : [0.100,0.050],
                              'Ceiling Systems'                 : [0.000,0.000]}
                 
            elif self.typology.lower() == 'ado' and self.occupancy.lower() == 'ind':
                 
                 self.data = {'Light Partitions and Finishes'   : [0.100,0.050],
                              'Heavy Partitions and Finishes'   : [0.000,0.000],
                              'Windows, Glazings and Doors'     : [0.900,0.450],
                              'Stairs'                          : [0.000,0.000],
                              'Electrical Components'           : [0.900,0.450],
                              'HVAC Systems'                    : [0.000,0.000],
                              'Piping Systems'                  : [0.100,0.050],
                              'Ceiling Systems'                 : [0.000,0.000]}
                                   
    def processSLFs(self, outDir, pFlag=True):
        
        ### define the attributes of the storey loss function tables
        items = ['ITEM','ID','EDP',	'Component','Group','Quantity', 'Damage States',
                 'DS1, Median Demand','DS2, Median Demand','DS3, Median Demand','DS4, Median Demand','DS5, Median Demand',	
                 'DS1, Total Dispersion (Beta)','DS2, Total Dispersion (Beta)','DS3, Total Dispersion (Beta)','DS4, Total Dispersion (Beta)','DS5, Total Dispersion (Beta)',
                 'DS1, Repair COST','DS2, Repair COST','DS3, Repair COST','DS4, Repair COST','DS5, Repair COST',	
                 'DS1, COST Dispersion (Beta)','DS2, COST Dispersion (Beta)','DS3, COST Dispersion (Beta)','DS4, COST Dispersion (Beta)','DS5, COST Dispersion (Beta)',
                 'DS1, best fit','DS2, best fit','DS3, best fit','DS4, best fit','DS5, best fit']

        ### load the metadata file
        file = f'{self.gitDir}/metadata/{self.region}/inventory/{self.typology}.xlsx'
        df = pd.read_excel(file,sheet_name=self.occupancy)
        
        ### drop unnecessary columns from analysis
        df = df.drop('Units', axis = 1) 
        df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
        
        ### initialise psd and pfa dataframes
        df_PSD = pd.DataFrame(columns = items)
        df_PFA = pd.DataFrame(columns = items)
                
        ### iterate over dataframe to extract drift- and acceleration-sensitive components
        iterPSD = 1
        iterPFA = 1

        for m in range(len(df['ID'])):
                             
            if df['EDP'][m]=='PSD':                        
                s = df.loc[m,:]
                s['ITEM']= iterPSD
                df_PSD = pd.concat([df_PSD, s.to_frame().T])
                iterPSD += 1
                
            elif df['EDP'][m]=='PFA':
                s = df.loc[m,:]
                s['ITEM']= iterPFA
                df_PFA = pd.concat([df_PFA, s.to_frame().T])
                iterPFA += 1
        
        ### save dataframe to csv
        df_PSD.to_csv(f'{self.gitDir}/metadata/{self.region}/output/PSD_{self.typology}_{self.occupancy}.csv', index=False)
        df_PFA.to_csv(f'{self.gitDir}/metadata/{self.region}/output/PFA_{self.typology}_{self.occupancy}.csv', index=False)
        
        ### process storey loss functions             
        # drift-sensitive non-structural SLFs
        path = f'{self.gitDir}/metadata/{self.region}/output/PSD_{self.typology}_{self.occupancy}.csv'
        component_psd = pd.read_csv(path)
        regF = 'Weibull'
        model = storeyloss.SLF(component_psd,edp= 'PSD', do_grouping= True,conversion = self.econFactor,realizations = 500,replacement_cost = 1.00,regression = regF)
        psd_slf = model.generate_slfs()

        # acceleration-sensitive non-structural SLFs
        path = f'{self.gitDir}/metadata/{self.region}/output/PFA_{self.typology}_{self.occupancy}.csv'
        component_pfa = pd.read_csv(path)
        regF = 'Weibull'
        model = storeyloss.SLF(component_pfa,edp= 'PFA', do_grouping= True,conversion = self.econFactor,realizations = 500,replacement_cost = 1.00,regression = regF)
        pfa_slf = model.generate_slfs()
                
        ### evaluate the total repair cost of the non-structural elements
        total_psd_repair_cost= np.max(psd_slf[list(psd_slf.keys())[0]]['slf'])
        total_pfa_repair_cost= np.max(pfa_slf[list(pfa_slf.keys())[0]]['slf'])
        total_repair_cost= np.max(psd_slf[list(psd_slf.keys())[0]]['slf']) + np.max(pfa_slf[list(pfa_slf.keys())[0]]['slf'])

        ### normalise the repair costs
        norm_psd = [x/total_repair_cost for x in psd_slf[list(psd_slf.keys())[0]]['slf']]
        norm_pfa = [x/total_repair_cost for x in pfa_slf[list(pfa_slf.keys())[0]]['slf']]

        ### adjust the range of psd to be in percent
        psd_slf[list(psd_slf.keys())[0]]['edp_range'] = [x*100 for x in psd_slf[list(psd_slf.keys())[0]]['edp_range']]

        # plot storey loss functions
        plt.plot(pfa_slf[list(pfa_slf.keys())[0]]['edp_range'], norm_pfa, linestyle='solid' , color = 'red',  label = "Acceleration-Sensitive Non-Structural Components")
        plt.plot(psd_slf[list(psd_slf.keys())[0]]['edp_range'], norm_psd, linestyle='solid' , color = 'blue', label = "Drift-Sensitive Non-Structural Components")
        plt.xlabel("Engineering Demand Parameter, PSD[%] or PFA[g]")
        plt.ylabel("Expected Loss Ratio $E[L|R], [USD/m^2/RepC]$")
        plt.grid(visible=True, which='major')
        plt.grid(visible=True, which='minor')
        plt.xlim([0, 2])
        plt.ylim([0, 1])
        plt.title(f'{self.region}_{self.typology}_{self.occupancy}')
        plt.legend(loc="upper right")
        plt.show()
            
        # get labels and weights of non-structural components
        componentLabels  = list(self.data.keys())
        componentWeights = [item[1] for item in list(self.data.values())]

        # defragment the storey loss function
        slfs={}
        for i, labels in enumerate(list(self.data.keys())):
            if i==0 or i==1 or i==2 or i==3:
                slfs[labels] = [psd_slf[list(psd_slf.keys())[0]]['edp_range'],[x*componentWeights[i] for x in norm_psd]]
            else:
                slfs[labels] = [pfa_slf[list(pfa_slf.keys())[0]]['edp_range'],[x*componentWeights[i] for x in norm_pfa]]
                
        # plot the component-based curves
        jet= plt.get_cmap('jet')
        colors = iter(jet(np.linspace(0,1,8)))
        for i in range(len(slfs)):                    
            plt.plot(slfs[componentLabels[i]][0], slfs[componentLabels[i]][1], linestyle='solid' , color = next(colors),label = f"{componentLabels[i]}")
        plt.xlabel("Engineering Demand Parameter, PSD[%] or PFA[g]")
        plt.ylabel("Expected Loss Ratio $E[L|R], [USD/m^2/RepC]$")
        plt.grid(visible=True, which='major')
        plt.grid(visible=True, which='minor')
        plt.xlim([0, 2])
        plt.ylim([0, 0.2])
        plt.title(f'{self.region}_{self.typology}_{self.occupancy}')
        plt.legend(loc="upper right")
        plt.show()
        
        # convert slfs to a dataframe
        slfs_to_export = pd.DataFrame()

        column_names = []
        for i in range(len(list(self.data.keys()))):
            
            # peak storey drift labels
            if i==0 or i==1 or i==2 or i==3:
                column_names.append('psd_range')
                column_names.append(list(self.data.keys())[i])
            # peak floor acceleration labels
            else:
                column_names.append('pfa_range')
                column_names.append(list(self.data.keys())[i])

        slfs_to_export = pd.DataFrame(columns = column_names)

        for i in range(len(slfs_to_export.columns)):
            
            if slfs_to_export.columns[i] == 'psd_range':
                slfs_to_export[slfs_to_export.columns[i]]= psd_slf[list(psd_slf.keys())[0]]['edp_range']
            elif slfs_to_export.columns[i] == 'pfa_range':
                slfs_to_export[slfs_to_export.columns[i]]= pfa_slf[list(pfa_slf.keys())[0]]['edp_range']
            elif slfs_to_export.columns[i] == 'Light Partitions and Finishes':
                slfs_to_export[slfs_to_export.columns[i]] = slfs['Light Partitions and Finishes'][1]
            elif slfs_to_export.columns[i] == 'Heavy Partitions and Finishes':
                slfs_to_export[slfs_to_export.columns[i]] = slfs['Heavy Partitions and Finishes'][1]
            elif slfs_to_export.columns[i] == 'Windows, Glazings and Doors':
                slfs_to_export[slfs_to_export.columns[i]] = slfs['Windows, Glazings and Doors'][1]
            elif slfs_to_export.columns[i] == 'Stairs':
                slfs_to_export[slfs_to_export.columns[i]] = slfs['Stairs'][1]
            elif slfs_to_export.columns[i] == 'Electrical Components':
                slfs_to_export[slfs_to_export.columns[i]] = slfs['Electrical Components'][1]
            elif slfs_to_export.columns[i] == 'HVAC Systems':
                slfs_to_export[slfs_to_export.columns[i]] = slfs['HVAC Systems'][1]
            elif slfs_to_export.columns[i] == 'Piping Systems':
                slfs_to_export[slfs_to_export.columns[i]] = slfs['Piping Systems'][1]
            elif slfs_to_export.columns[i] == 'Ceiling Systems':
                slfs_to_export[slfs_to_export.columns[i]] = slfs['Ceiling Systems'][1]
         
        export_to_pkl(f'{self.gitDir}/metadata/{self.region.lower()}/output/slf_{self.typology.lower()}_{self.occupancy.lower()}.pkl', slfs)    
        slfs_to_export.to_csv(f'{outDir}/{self.region.lower()}_{self.typology.lower()}_{self.occupancy.lower()}.csv', index=False)
                
        return slfs_to_export, slfs, psd_slf, pfa_slf 
    
    def processVulnerability(self, nst, slfs, ims, psd, pfa, outDir, collLimit =5.0, fun= 'logit'):
        """
        Vulnerability calculation tool
        :param nst:        int                Integer with number of storey (e.g., 'Region 1')
        :param slfs:       dict               Dictionary which includes the slfs derived for different components
        :param ims:        list               List of intensity measure levels with size [ngmrs x 1]
        :param psd:        array              Array of peak storey drifts with size  [ngmrs x nst] 
        :param pfa:        array              Array of peak floor acceleration with size [ngmrs x nfloors]
        :param OutDir:     string             Directory of the output folder
        """
        self.nst  = nst
        self.slfs = slfs
        self.ims  = ims
        self.psd  = psd
        self.pfa  = pfa
        
        self.nfloors = self.nst+1
        
        # define weights of losses from slfs 
        weight_psd = np.ones((1,self.nst))*(1/self.nst)
        weight_pfa = np.ones((1,self.nfloors))*(1/self.nfloors)
        
        # get losses due to peak storey drifts and floor accelerations
        storey_loss_psd = np.zeros((len(ims),self.nst))
        floor_loss_pfa  = np.zeros((len(ims),self.nfloors))
        
        # get total losses along the building height
        drift_loss = np.zeros((len(ims),1))
        accel_loss = np.zeros((len(ims),1))
        total_loss  = np.zeros((len(ims),1))
        
        for i in range(len(ims)):
            
            # collapse check
            if (psd[i,:]>=collLimit).any():
                
                total_loss[i,0] = 1.0
            
            elif (psd[i,:]>=collLimit).any()==False:
            
                for j in range(self.nst):
                                    
                    # Storey losses due to light partitions and finishes
                    a = np.interp(psd[i,j]*100,slfs['Light Partitions and Finishes'][0],slfs['Light Partitions and Finishes'][1])
                    b = np.interp(psd[i,j]*100,slfs['Heavy Partitions and Finishes'][0],slfs['Heavy Partitions and Finishes'][1])
                    c = np.interp(psd[i,j]*100,slfs['Windows, Glazings and Doors'][0],slfs['Windows, Glazings and Doors'][1])
                    d = np.interp(psd[i,j]*100,slfs['Stairs'][0],slfs['Stairs'][1])
                
                    storey_loss_psd[i,j] = a+b+c+d
            
                for j in range(self.nfloors):
                    
                    # Storey losses due to light partitions and finishes
                    e = np.interp(pfa[i,j],slfs['Electrical Components'][0],slfs['Electrical Components'][1])
                    f = np.interp(pfa[i,j],slfs['HVAC Systems'][0],slfs['HVAC Systems'][1])
                    g = np.interp(pfa[i,j],slfs['Piping Systems'][0],slfs['Piping Systems'][1])
                    h = np.interp(pfa[i,j],slfs['Ceiling Systems'][0],slfs['Ceiling Systems'][1])
            
                    floor_loss_pfa[i,j] = e+f+g+h
    
                # total drift and acceleration losses
                drift_loss[i,0] = np.dot(storey_loss_psd[i,:],np.transpose(weight_psd))
                accel_loss[i,0] = np.dot(floor_loss_pfa[i,:],np.transpose(weight_pfa))
                total_loss[i,0] = drift_loss[i,0] + accel_loss[i,0]
        
        ### Fit the vulnerability function
        
        if fun.lower() == 'binomial':
            for i in range(len(total_loss)):
                if total_loss[i]<0.5:
                    total_loss[i]=0.0
                elif total_loss[i]>=0.5:
                    total_loss[i]=1.0
            #fit and plot the functional form
            maxval = np.max(total_loss.flatten().tolist())
            popt, pcov = curve_fit(fun_logit, ims, total_loss.flatten().tolist()/maxval, maxfev=10**9)
            perr = np.sqrt(np.diag(pcov))
            x = np.linspace(0,10,500)
            y_fun = []        
            for k in range(len(x)):
                y_fun.append(fun_logit(x[k],popt[0],popt[1]))

        if fun.lower() == 'weibull':
            #fit and plot the functional form
            maxval = np.max(total_loss.flatten().tolist())
            popt, pcov = curve_fit(fun_weibull, ims, total_loss.flatten().tolist()/maxval, maxfev=10**9)
            perr = np.sqrt(np.diag(pcov))
            x = np.linspace(0,10,500)
            y_fun = []        
            for k in range(len(x)):
                y_fun.append(fun_weibull(x[k],popt[0],popt[1],popt[2]))
        elif fun.lower() == 'logit':
            #fit and plot the functional form
            maxval = np.max(total_loss.flatten().tolist())
            popt, pcov = curve_fit(fun_logit, ims, total_loss.flatten().tolist()/maxval, maxfev=10**9)
            perr = np.sqrt(np.diag(pcov))
            x = np.linspace(0,10,500)
            y_fun = []        
            for k in range(len(x)):
                y_fun.append(fun_logit(x[k],popt[0],popt[1]))
        elif fun.lower() == 'normcdf':
            #fit and plot the functional form
            maxval = np.max(total_loss.flatten().tolist())
            f = lambda x,mu,sigma: norm(mu,sigma).cdf(x)
            mu,sigma = curve_fit(f,ims,total_loss.flatten().tolist()/maxval)[0]
            
            y_fun = norm.cdf(np.log((np.linspace(0.0, 10.0, 500))/ mu) /sigma, loc=0, scale=1)
        
        # plot the results
        plt.scatter(ims, total_loss)
        plt.plot(np.linspace(0.0, 10.0, 500), y_fun,  linestyle='solid' , color = 'blue')
        plt.xlabel("Intensity Measure [g]")
        plt.ylabel("Total Loss Ratio")
        plt.grid(visible=True, which='major')
        plt.grid(visible=True, which='minor')
        plt.xlim([0,10.0])
        plt.ylim([0,1.0])
        plt.show()
        
        return total_loss, floor_loss_pfa, storey_loss_psd, drift_loss, accel_loss

        